.. _install:

Installing NSuite
================================

The first stage of the NSuite workflow is to install the simulation engine(s) that are going to be benchmarked and/or validated.
This page describes how to obtain NSuite, then perform this step so that benchmarks and validation tests can be run.

Obtaining NSuite
--------------------------------

Before installing, first get a copy of NSuite.
The simplest way to do this is to clone the repository using git:

.. container:: example-code

    .. code-block:: bash

        git clone https://github.com/arbor-sim/nsuite.git
        cd nsuite
        git checkout v1.0

Above ``git checkout`` is used to pick a tagged version of NSuite. If not called
the most recent version of  NSuite in the master branch will be used.

**TODO** guide on how to download zipped/tarred version from tags.

Installing Simulation Engines
--------------------------------

NSuite provides a script ``install-local.sh`` that performs the role of

* Obtaining the source code for simulation engines.
* Compiling and installing simulation engines.
* Compiling and installing benchmark and validation test drivers.
* Generating input data sets for validation tests.

Basic usage of ``install-local.sh`` is best illustrated with some examples:

.. container:: example-code

    .. code-block:: bash

        # download and install Arbor
        ./install-local.sh arbor

        # download and install NEURON and CoreNeuron
        ./install-local.sh neuron coreneuron

        # download install all three of Arbor, NEURON and CoreNeuron
        ./install-local.sh all

        # download install NEURON in relative path install
        ./install-local.sh neuron --prefix=install

        # download install NEURON in relative path that includes time stamp
        # e.g. install-2019-03-22
        ./install-local.sh neuron --prefix=install-$(date +%F)

        # download install NEURON in absolute path
        ./install-local.sh neuron --prefix=/home/uname/install

The simulation engines to install are provided as arguments.

====================  =================     ======================================================
Flag                  Default value         Explanation
====================  =================     ======================================================
simulator             none                  Which simulation engines to download and install.
                                            Possible values are ``{arbor, neuron, coreneuron, all}``.
``--prefix``          current path          Path for downloading, compiling, installing simulation engines.
                                            Also used to store inputs and outputs from benchmarks and validation tests.
                                            Can be either a relative or absolute path.
``--env``             none                  Optional script for configuring the environment and build steps.
                                            See :ref:`customenv`.
====================  =================     ======================================================

.. _customenv:

Directory Structure
""""""""""""""""""""""""""""""""

Running the ``install-local.sh`` with a ``--prefix`` will create the following directory structure:

.. code-block:: none

    prefix
    ├── build
    │   ├── arbor
    │   ├── coreneuron
    │   ├── neuron
    │   └── ...
    ├── install
    │   ├── bin
    │   ├── include
    │   ├── lib
    │   └── share
    ├── config
    ├── input
    │   └── benchmarks
    ├── output
    │   ├── benchmarks
    │   └── validation
    └── cache

If no prefix is provided, the same directory structure is created in the nsuite path.
The contents of each sub-directory are summarised:

====================  ======================================================
``build```            Source code for simulation engines is checked out, and compiled here.
``install```          Installation target for the simulation engine libraries, executables, headers, etc.
``config```           The environment used to build each simulation engine is stored here, to load per-simulator when running benchmarks and validation tests.
``cache```            Validation data sets are stored here when generated during the installation phase.
``input```            **generated by running benchmarks** Input files for benchmark runs in sub-directories for each benchmark configuration.
``output```           **generated by running benchmarks/validation** Benchmark and validation outputs in sub-directories for each benchmark/validation configuration.
====================  ======================================================

Customizing the environment
""""""""""""""""""""""""""""""""

NSuite attempts to detect features of the environment that will influence how simulation engines are
compiled and run, including compilers, MPI support and core counts.
HPC systems have multiple compilers, MPI implementations and hardware resources available, which
are typically configured using modules.
It isn't possible for NSuite to detect which options to choose on such systems, so it
allows the user to customise the compilation and execution of simulation engines.
To do this, a user provides an *environment configuration script* that will sourced
after NSuite has performed automatic environment detection and configuration.

The script is specified  with the ``--env`` flag:

.. container:: example-code

    .. code-block:: bash

        ./install-local arbor  --env=arbor-config.sh
        ./install-local neuron --env=neuron-config.sh

In the example above, different configurations are used for Arbor and NEURON.
This can be used, for example, to choose compilers that produce optimal
results on each respective simulator, or when different simulators require
different versions of a library.

An example configuration script

.. container:: example-code

    .. code-block:: bash

        
        


General Variables
````````````````````````````````

The following variables are universal to all of the simulation engines.

========================  ==================================     ======================================================
Variable                  Default value                          Explanation
========================  ==================================     ======================================================
``ns_cc``                 ``mpicc`` if available, else           The C compiler for compiling simulation engines.
                          ``gcc``/``clang`` on Linux/OS X.
``ns_cxx``                ``mpicxx`` if available, else          The C++ compiler for compiling simulation engines.
                          ``g++``/``clang++`` on Linux/OS X.
``ns_with_mpi``           ``ON`` iff MPI is detected.            `ON/OFF` to compile simulation engines with MPI enabled.
                                                                 Also controls whether mpirun is used to launch benchmarks.
``ns_makej``              4                                      Number of parallel jobs to use when compiling.
``ns_python``             ``which python3``                      The Python interpreter to use. Must be Python 3.
``ns_threads_per_core``   automatic                              The number of threads per core for parallel benchmarks.
``ns_cores_per_socket``   automatic                              The number of cores per socket for parallel benchmarks.
``ns_sockets``            1                                      The number of sockets for parallel benchmarks. One MPI rank is used per socket if MPI support is enabled.
========================  ==================================     ======================================================


Simulator-Specific Variables
````````````````````````````````

# Arbor specific
ns_arb_repo=https://github.com/arbor-sim/arbor.git
ns_arb_branch=v0.2

ns_arb_arch=native
ns_arb_with_gpu=OFF
ns_arb_vectorize=ON

Neuron specific

Neuron is inconsistent with the location and naming scheme of different
versions, so just hard code URL and name of the tar ball.

# The path of the unpacked tar ball. It can't be determined from
# inspecting the name of the tar ball.
ns_nrn_path=nrn-7.6
ns_nrn_tarball=nrn-7.6.5.tar.gz
ns_nrn_url=https://neuron.yale.edu/ftp/neuron/versions/v7.6/7.6.5/${ns_nrn_tarball}

# set to a git repository url to source from a git repo instead of using
# official tar ball
#ns_nrn_git_repo=https://github.com/neuronsimulator/nrn.git
ns_nrn_git_repo=
# set this variable if using git and want to use a branch other than master
ns_nrn_branch=master

# CoreNeuron specific
ns_cnrn_git_repo=https://github.com/BlueBrain/CoreNeuron.git
ns_cnrn_sha=0.14



